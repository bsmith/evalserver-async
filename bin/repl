#!/usr/bin/env perl

use strict;
use warnings;
use Data::Dumper;
use FindBin;
use lib $FindBin::Bin . "/../lib";
use Term::ReadLine;
use IO::Async::Loop;
use IO::Async::Stream;

use EvalServer::Protocol;




my $loop = IO::Async::Loop->new();
my $term = Term::ReadLine->new("Erepl");
my $seq = 1;

my $connect_future = $loop->new_future();

$loop->connect(
    addr => {
       family   => "inet",
       socktype => "stream",
       port     => 14401,
       ip       => "localhost",
    },
    on_stream => sub {
        my $stream = shift;

        $stream->configure(
            on_read => sub {
                my ($self, $bufref, $eof) = @_;

                if ($eof) {
                    print "Disconnected\n";
                    use Carp qw/cluck/;
                    cluck "FOO\n";
                    exit(1);
                }
                print "Got data\n";

                my ($res, $message, $nbuf) = decode_message($$bufref);
                if ($res) {
                    $$bufref = $nbuf;
                    print Dumper($message);
                }

                return 1;
            }
        );

        $loop->add($stream);
        $connect_future->done($stream);
    },
    on_connect_error => sub {die "no connect"}
 );

my $stream = $connect_future->get;

$term->event_loop(sub {
  my $data = shift;
  $data->[1] = $loop->new_future;
  $data->[1]->get;
}, sub {
  my $fh = shift;
  my $data = [];
  $data->[0] = $loop->watch_io(handle => $fh, on_read_ready => sub { $data->[1]->done });
  $data;
});

while (my $line = $term->readline("$seq> ")) {
  my $eval = {language => 'perl', sequence => $seq, prio => {pr_realtime => {}}, files => [{filename => "__code", contents => $line}]};

  my $message = encode_message(eval => $eval);
  $seq++;
  print "Sending\n";
  $stream->write($message);
  print "Sent\n";
}